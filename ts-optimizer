#!/usr/bin/env python
import cli.log
import cli.app
import json
from lxml import etree
import lxml
import os


class Test:
    def __init__(self, path, time, suite):
        self.path = path
        self.time = float(time)
        self.suite = suite
    def __repr__(self):
        return self.path + ':' + str(self.time)+ ', suite:' + str(self.suite)

class TestSuite:
    def __init__(self, name):
        self.name = name
        self.time = 0
        self.paths = []

    def __repr__(self): 
        return 'name: ' + self.name + ', time:' + str(self.time) 

    def addTest(self, test):
        self.time += float(test.time)
        self.paths.append(test.path)

def loadLog(source):
    parser = etree.XMLParser(remove_blank_text=True)
    doc = etree.parse(source, parser)
    suites = doc.xpath("//testsuite")
    suites = filter(lambda x: "file" in x.attrib, suites)
    return suites


def loadConfig(config):
    parser = etree.XMLParser(remove_blank_text=True)
    tree = etree.parse(config, parser)
    return tree

def aggregateAndSort(data):

    #remove the root path
    root = os.getcwd()
    
    # Aggregate by path
    paths = {}
    for point in data:
        if (root in point.attrib['file']):
            filePath = point.attrib['file'].replace(root,'.')
            suite = point.getparent().attrib['name']
        else:
            raise ValueError('You need to run the function at the root of your project')

        if (filePath in paths):
            paths[filePath].time += float(point.attrib['time'])
        else:
            paths[filePath] = Test(filePath, point.attrib['time'], suite)

    paths = paths.values()
    paths = sorted(paths, key=lambda x: x.time, reverse=True)

    return paths

def buildTestSuites(tests, generatedName, number):
    suites = []

    for i in range(number):
        suites.append(TestSuite(str(i) + generatedName))

    for test in tests:
        suites[0].addTest(test)
        suites = sorted(suites, key=lambda x: x.time)

    return suites


def addGeneratedTestSuites(doc, testSuites, tests):

    # Inserting the testsuite in the testsuites node
    testSuitesNode = doc.find('testsuites')
    for testSuite in testSuites:
        suiteNode = lxml.etree.Element("testsuite", attrib={'name': testSuite.name})
        for path in testSuite.paths:
            node = lxml.etree.Element("file")
            node.text = path
            suiteNode.insert(0, node)
        testSuitesNode.insert(0, suiteNode)

    for test in tests:
        suite = doc.xpath("//testsuite[@name='"+test.suite+"']")
        if (len(suite) != 1):
            raise ValueError("Error with suite "+test.suite)
        node = lxml.etree.Element("exclude")
        node.text = test.path
        suite[0].insert(0, node)
    
    return doc

def writeGeneratedConfig(xmlConfig, filePath):
    f = open(filePath, 'w')
    f.write(lxml.etree.tostring(xmlConfig, pretty_print=True))
    f.close()

# Test Suite Generator (tsg)
@cli.log.LoggingApp
def tsg(app):
    if (app.params.suitesNumber <= 0):
        raise ValueError('The number of test suites is too low')

    app.log.debug("Loading output data from" + app.params.source)
    # Load the data from json
    testsLog = loadLog(app.params.source)

    # Load the current config
    app.log.debug("Loading config template from" + app.params.template)
    configXml   = loadConfig(app.params.template)

    # Sanitize the data
    app.log.debug("Sanitizing the data")
    tests = aggregateAndSort(testsLog)

    # Use the data to create the groups
    app.log.debug("Building semi-optimal groups")
    testSuites   = buildTestSuites(tests, app.params.generated, app.params.suitesNumber)
    print(testSuites)

    # Write the generated test suites
    app.log.debug("Including the generated test suites to the config")
    xmlConfig = addGeneratedTestSuites(configXml, testSuites, tests)

    # Write xml tree to disk
    app.log.debug("Write new file to disk: " + app.params.output)
    writeGeneratedConfig(xmlConfig, app.params.output)


tsg.add_param("-j", "--sourceJunit", dest="source", help="PHPUnit JUNIT source", type=str)
tsg.add_param("-t", "--sourceConfig", dest="template", help="PHPUnit .xml config file to use as template, it should have a testSuite with name='Generated'", type=str)
tsg.add_param("-a", "--generatedSuiteSuffix", dest="generated", help="Prefix for the generated test suites", default="_Generated", type=str)
tsg.add_param("-n", "--suitesNumber", dest="suitesNumber", help="Number of suites to create", default=2, type=int)
tsg.add_param("-o", "--output", dest="output", help="Output file", default="phpunit_generated.xml", type=str)

if __name__ == "__main__":
    tsg.run()

